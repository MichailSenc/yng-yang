{"version":3,"sources":["webpack://yng-yang/./src/components/empty-points.js","webpack://yng-yang/./src/components/points-generation.js","webpack://yng-yang/./src/index.js","webpack://yng-yang/./src/components/canvas.js"],"names":["startPanel","colors","canvas","getContext","width","height","cellSize","settings","percentYin","document","querySelector","percentYang","countAlive","generButton","changePercent","param1","param2","value","addEventListener","maxValue","Math","floor","curValue","console","log","countYng","round","countYang","maxSizeX","maxSizeY","emptyPoints","sizeX","sizeY","this","points","i","j","push","temp","arr","length","random","shuffle","clearCanvas","setDefaultMatrix","cellType","x","y","pop","map","item","putCoordinate","randomGeneration","windowToCanvas","bbox","getBoundingClientRect","left","top","querySelectorAll","forEach","event","target","e","clientX","clientY","canvasCoordinates","innerHTML","customGeneration","container","grid","cnv","createElement","classList","add","id","style","backgroundColor","empty","createCanvas","ctx","strokeStyle","w","h","strokeRect","createGrid","createStartPanel","_settings","_colors","panel","clearRect","defaultMatrix","iMax","jMax","Array","fillStyle","fillRect","toggle","yng","yang","start","appendChild"],"mappings":"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","file":"main.js","sourcesContent":["class EmptyPoints {\r\n    constructor(sizeX, sizeY) {\r\n        this.points = [];\r\n        for (let i = 0; i < sizeX; i++) {\r\n            for (let j = 0; j < sizeY; j++) {\r\n                this.points.push([i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // случайнное перемешиване массива - алгоритм Фишера-Йетса \r\n    shuffle(){\r\n        let arr = this.points;\r\n        let j, temp;\r\n        for(let i = arr.length - 1; i > 0; i--){\r\n            j = Math.floor(Math.random()*(i + 1));\r\n            temp = arr[j];\r\n            arr[j] = arr[i];\r\n            arr[i] = temp;\r\n        }\r\n        return this.points;\r\n    }\r\n}\r\n\r\nexport default EmptyPoints;\r\n","import EmptyPoints from \"./empty-points\";\r\n\r\nfunction pointsGeneration(startPanel, colors) {\r\n    const canvas = startPanel.canvas,\r\n        ctx = canvas.getContext(\"2d\");\r\n    let { width, height, cellSize } = startPanel.settings;\r\n\r\n    /* -----------------------Рандомная генерация-------------------------------------------------*/\r\n    function randomGeneration() {\r\n        const percentYin = document.querySelector(\"#yin_percent\"),\r\n            percentYang = document.querySelector(\"#yang_percent\"),\r\n            countAlive = document.querySelector(\"#count_alive\"),\r\n            generButton = document.querySelector(\"#generate_button\");\r\n\r\n        function changePercent(param1, param2) {\r\n            let value = +param2.value > 100 ? 100 : +param2.value < 0 ? 0 : +param2.value;\r\n            param2.value = value;\r\n            param1.value = 100 - value;\r\n        }\r\n\r\n        // input-ы в рандомной генерации\r\n        percentYang.addEventListener(\"input\", () => changePercent(percentYin, percentYang));\r\n        percentYin.addEventListener(\"input\", () => changePercent(percentYang, percentYin));\r\n        countAlive.addEventListener(\"input\", () => {\r\n            let maxValue = Math.floor((width - 1) / cellSize) * Math.floor((height - 1) / cellSize),\r\n                curValue = +countAlive.value;\r\n            countAlive.value = curValue < 0 ? 0 : curValue > maxValue ? maxValue : +countAlive.value;\r\n        });\r\n\r\n        // кнопка генерации точек на полотне\r\n        generButton.addEventListener(\"click\", () => {\r\n            if (!countAlive.value || !percentYin.value || !percentYang.value) {\r\n                console.log(\"null check failed!!!\");\r\n                return;\r\n            }\r\n\r\n            let countYng = Math.round((+countAlive.value * +percentYin.value) / 100),\r\n                countYang = +countAlive.value - countYng,\r\n                maxSizeX = Math.floor((width - 1) / cellSize) * cellSize,\r\n                maxSizeY = Math.floor((height - 1) / cellSize) * cellSize;\r\n\r\n            // Сгенерировать масив рандомно перемешанных точек на плоскости\r\n            const emptyPoints = new EmptyPoints(maxSizeX / cellSize, maxSizeY / cellSize).shuffle();\r\n\r\n            // очищаем полотно\r\n            startPanel.clearCanvas();\r\n            startPanel.setDefaultMatrix();\r\n\r\n            // ставим новые точки\r\n            startPanel.settings.cellType = \"yng\";\r\n            for (let i = 0; i < countYng; i++) {\r\n                let [x, y] = emptyPoints.pop().map((item) => item * cellSize);\r\n                startPanel.putCoordinate({ x, y });\r\n            }\r\n            startPanel.settings.cellType = \"yang\";\r\n            for (let i = 0; i < countYang; i++) {\r\n                let [x, y] = emptyPoints.pop().map((item) => item * cellSize);\r\n                startPanel.putCoordinate({ x, y });\r\n            }\r\n        });\r\n    }\r\n\r\n    /* -----------------------Пользовательская генерация------------------------------------------*/\r\n    function customGeneration() {\r\n        const radio = document.querySelectorAll('[name=\"radio\"]');\r\n\r\n        radio.forEach((item) => {\r\n            item.addEventListener(\"change\", (event) => (startPanel.settings.cellType = event.target.value));\r\n        });\r\n\r\n        // Координаты canvas относительно Window\r\n        function windowToCanvas(canvas, x, y) {\r\n            let bbox = canvas.getBoundingClientRect();\r\n            x -= bbox.left * (canvas.width / bbox.width);\r\n            y -= bbox.top * (canvas.height / bbox.height);\r\n            return {\r\n                x: Math.floor(x / cellSize) * cellSize,\r\n                y: Math.floor(y / cellSize) * cellSize,\r\n            };\r\n        }\r\n\r\n        canvas.addEventListener(\"mousedown\", (e) => {\r\n            startPanel.putCoordinate(windowToCanvas(e.target, e.clientX, e.clientY));\r\n        });\r\n\r\n        const canvasCoordinates = document.querySelector(\".canvas_coordinates\");\r\n        canvas.addEventListener(\"mousemove\", (e) => {\r\n            let { x, y } = windowToCanvas(e.target, e.clientX, e.clientY);\r\n            canvasCoordinates.innerHTML = `X: ${x / cellSize}; Y: ${y / cellSize}`;\r\n        });\r\n    }\r\n    /* -------------------------------------------------------------------------------------------*/\r\n\r\n    randomGeneration();\r\n    customGeneration();\r\n}\r\nexport default pointsGeneration;\r\n","// import \"materialize-css\";\r\nimport pointsGeneration from \"./components/points-generation\";\r\nimport SrartPanel from \"./components/canvas\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const container = document.querySelector(\"#container\");\r\n    const cell = 6;\r\n    const settings = {\r\n        cellSize: cell,\r\n        width: Math.floor(750/cell) * cell + 1,\r\n        height: Math.floor(750/cell) * cell + 1, \r\n        cellType: \"empty\",\r\n    };\r\n\r\n    // console.log(settings);\r\n\r\n    const colors = { empty: \"#D3D3D3\", yng: \"#008000\", yang: \"#FF0000\", grid: \"black\" };\r\n    const startPanel = new SrartPanel(colors, settings);\r\n\r\n    startPanel.start();\r\n\r\n    pointsGeneration(startPanel);\r\n\r\n    container.appendChild(startPanel.canvas);\r\n    container.appendChild(startPanel.grid);\r\n\r\n    function start(params) {}\r\n});\r\n","// создать полотно, сетку и добавить события для чекбоксов\r\nclass SrartPanel {\r\n    constructor(colors, settings) {\r\n        const { canvas, grid } = createStartPanel(colors, settings);\r\n        this._settings = settings;\r\n        this._colors = colors;\r\n        this.canvas = canvas;\r\n        this.grid = grid;\r\n        this.panel;\r\n        this.setDefaultMatrix();\r\n    }\r\n\r\n    // очистить полотно\r\n    clearCanvas() {\r\n        this.canvas.getContext(\"2d\").clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.panel = this.setDefaultMatrix(this._settings);\r\n    }\r\n\r\n    // обнулить матрицу панели\r\n    setDefaultMatrix() {\r\n        this.panel = this.defaultMatrix();\r\n    }\r\n\r\n    // создать пустую матрицу поля\r\n    defaultMatrix() {\r\n        const { width, height, cellSize } = this._settings,\r\n            iMax = Math.floor(width / cellSize),\r\n            jMax = Math.floor(height / cellSize),\r\n            panel = [];\r\n    \r\n        for (let i = 0; i < iMax; i++) panel[i] = new Array(jMax);\r\n        return panel;\r\n    }\r\n\r\n    putCoordinate({ x, y }) {\r\n        const { cellSize, cellType } = this._settings,\r\n            ctx = this.canvas.getContext(\"2d\");\r\n        this.panel[x / cellSize][y / cellSize] = cellType == \"empty\" ? null : cellType;\r\n        ctx.fillStyle = this._colors[`${cellType}`];\r\n        ctx.fillRect(x, y, cellSize, cellSize);\r\n    }\r\n\r\n    start() {\r\n        // Показать/убрать сетку\r\n        document.querySelector(\"#grid_checkbox\").addEventListener(\"input\", () => {\r\n            this.grid.classList.toggle(\"hidden\");\r\n        });\r\n        // Показать/убрать полото\r\n        document.querySelector(\"#canvas_checkbox\").addEventListener(\"input\", () => {\r\n            this.canvas.classList.toggle(\"hidden\");\r\n        });\r\n\r\n        document.querySelector(\"#clear_button\").addEventListener(\"click\", () => {\r\n            this.clearCanvas();\r\n            this.setDefaultMatrix();\r\n        });\r\n    }\r\n\r\n    set settings(value) {\r\n        this._settings = value;\r\n    }\r\n\r\n    get settings() {\r\n        return this._settings;\r\n    }\r\n}\r\n\r\nfunction createStartPanel(colors, settings) {\r\n    const { width, height, cellSize } = settings;\r\n    // сетка canvas\r\n    function createGrid() {\r\n        const cnv = document.createElement(\"canvas\");\r\n        cnv.id = \"grid_canvas\";\r\n        cnv.width = width;\r\n        cnv.height = height;\r\n        let ctx = cnv.getContext(\"2d\");\r\n        ctx.strokeStyle = colors.grid;\r\n        let w = cnv.width - 1;\r\n        let h = cnv.height - 1;\r\n        for (let x = 0; x < w; x += cellSize) ctx.strokeRect(x, 0, 0.1, h);\r\n        for (let y = 0; y < h; y += cellSize) ctx.strokeRect(0, y, w, 0.1);\r\n        return cnv;\r\n    }\r\n\r\n    // основное полотно\r\n    function createCanvas() {\r\n        const cnv = document.createElement(\"canvas\");\r\n        cnv.classList.add(\"background\");\r\n        cnv.classList.add(\"transparency\");\r\n        cnv.id = \"canvas\";\r\n        cnv.width = width;\r\n        cnv.height = height;\r\n        cnv.style.backgroundColor = colors.empty;\r\n        return cnv;\r\n    }\r\n\r\n    return {\r\n        canvas: createCanvas(),\r\n        grid: createGrid(),\r\n    };\r\n}\r\n\r\nexport default SrartPanel;\r\n"],"sourceRoot":""}