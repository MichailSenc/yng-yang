{"version":3,"sources":["webpack://yng-yang/./src/components/empty-points.js","webpack://yng-yang/./src/components/points-generation.js","webpack://yng-yang/./src/components/canvas.js","webpack://yng-yang/./src/index.js"],"names":["panel","canvas","settings","colors","ctx","getContext","width","height","cellSize","cellType","putCord","x","y","fillStyle","fillRect","percentYin","document","querySelector","percentYang","countAlive","generButton","changePercent","param1","param2","value","addEventListener","console","log","countYng","countYang","maxSizeX","maxSizeY","maxX","maxY","Math","floor","style","backgroundColor","empty","emptyPoints","sizeX","sizeY","this","points","i","j","push","sort","random","shuffle","pop","map","item","randomGeneration","radio","querySelectorAll","typeButton","forEach","event","target","typeButtonFlag","innerText","customGeneration","windowToCanvas","bbox","getBoundingClientRect","left","top","e","clientX","clientY","canvasCoordinates","innerHTML","putPointsEvents","defaultMatrix","iMax","jMax","Array","container","yng","yang","grid","cnv","createElement","classList","add","id","createCanvas","strokeStyle","w","h","strokeRect","createGrid","clearRect","clearCanvas","toggle","canvasCheckboxEvents","appendChild"],"mappings":"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","file":"main.js","sourcesContent":["class EmptyPoints {\r\n    constructor(sizeX, sizeY) {\r\n        this.points = [];\r\n        for (let i = 0; i < sizeX; i++) {\r\n            for (let j = 0; j < sizeY; j++) {\r\n                this.points.push([i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    shuffle() {\r\n        return this.points.sort(() => Math.random() - 0.5);\r\n    }\r\n}\r\n\r\nexport default EmptyPoints;\r\n","import EmptyPoints from \"./empty-points\";\r\n\r\nfunction pointsGeneration(panel, canvas, settings, colors) {\r\n    const ctx = canvas.getContext(\"2d\");\r\n    let { width, height, cellSize, cellType } = settings;\r\n\r\n    function randomGeneration() {\r\n        const percentYin = document.querySelector(\"#yin_percent\"),\r\n            percentYang = document.querySelector(\"#yang_percent\"),\r\n            countAlive = document.querySelector(\"#count_alive\"),\r\n            generButton = document.querySelector(\"#generate_button\");\r\n\r\n        function changePercent(param1, param2) {\r\n            let value = +param2.value > 100 ? 100 : +param2.value < 0 ? 0 : +param2.value;\r\n            param2.value = value;\r\n            param1.value = 100 - value;\r\n        }\r\n\r\n        // input-ы в рандомной генерации\r\n        percentYang.addEventListener(\"input\", () => changePercent(percentYin, percentYang));\r\n        percentYin.addEventListener(\"input\", () => changePercent(percentYang, percentYin));\r\n        countAlive.addEventListener(\"input\", () => {\r\n            countAlive.value = +countAlive.value < 0 ? 0 : +countAlive.value;\r\n        });\r\n\r\n        // const maxX = Math.floor(width),\r\n        //     maxY = Math.floor(height);\r\n\r\n        //TODO написать обработку события рандомной генерации\r\n        generButton.addEventListener(\"click\", () => {\r\n            if (!countAlive.value || !percentYin.value || !percentYang.value) {\r\n                console.log(\"null check failed!!!\");\r\n                return;\r\n            }\r\n\r\n            let countYng = (+countAlive.value * +percentYin.value) / 100,\r\n                countYang = +countAlive.value - countYng;\r\n\r\n            let { maxSizeX, maxSizeY } = getMaxPointsCount(width - 1, height - 1);\r\n\r\n            // Сренерировать масив перемешанных точек на плоскости\r\n\r\n            canvas.style.backgroundColor = colors.empty;\r\n            const emptyPoints = new EmptyPoints(maxSizeX / cellSize, maxSizeY / cellSize).shuffle();\r\n\r\n            cellType = \"yng\";\r\n            for (let i = 0; i < countYng; i++) {\r\n                let [x, y] = emptyPoints.pop().map(item => item * cellSize);\r\n                putCord({x,y});\r\n            }\r\n            cellType = \"yang\";\r\n            for (let i = 0; i < countYang; i++) {\r\n                let [x, y] = emptyPoints.pop().map(item => item * cellSize);\r\n                putCord({x,y});\r\n            }\r\n            // console.log(panel);\r\n        });\r\n    }\r\n\r\n    function putCord({ x, y }) {\r\n        panel[x / cellSize][y / cellSize] = cellType;\r\n        ctx.fillStyle = colors[`${cellType}`];\r\n        ctx.fillRect(x, y, cellSize, cellSize);\r\n    }\r\n\r\n    function getUnicRandomCord(maxX, maxY) {\r\n        let x = Math.floor(maxX / cellSize) * cellSize;\r\n        let y = Math.floor(maxY / cellSize) * cellSize;\r\n\r\n        if (panel[x / cellSize][y / cellSize]) {\r\n            console.log(\"uniq\");\r\n            return getUnicRandomCord(maxX, maxY, panel);\r\n        }\r\n\r\n        // console.log(x, y);\r\n        return {\r\n            x,\r\n            y,\r\n        };\r\n    }\r\n\r\n    function getMaxPointsCount(maxX, maxY) {\r\n        return {\r\n            maxSizeX: Math.floor(maxX / cellSize) * cellSize,\r\n            maxSizeY: Math.floor(maxY / cellSize) * cellSize,\r\n        };\r\n    }\r\n\r\n    function customGeneration() {\r\n        const radio = document.querySelectorAll('[name=\"radio\"]'),\r\n            typeButton = document.querySelector(\"#input_type_button\");\r\n\r\n        radio.forEach((item) => {\r\n            item.addEventListener(\"change\", (event) => (settings.cellType = cellType = event.target.value));\r\n        });\r\n\r\n        let typeButtonFlag = true;\r\n\r\n        typeButton.addEventListener(\"click\", () => {\r\n            typeButton.innerText = typeButtonFlag ? \"Установка точек мышкой\" : \"Ввести координаты\";\r\n            typeButtonFlag = !typeButtonFlag;\r\n        });\r\n    }\r\n\r\n    function putPointsEvents() {\r\n        // Координаты canvas относительно Window\r\n        function windowToCanvas(canvas, x, y) {\r\n            let bbox = canvas.getBoundingClientRect();\r\n            x -= bbox.left * (canvas.width / bbox.width);\r\n            y -= bbox.top * (canvas.height / bbox.height);\r\n            return {\r\n                x: Math.floor(x / cellSize) * cellSize,\r\n                y: Math.floor(y / cellSize) * cellSize,\r\n            };\r\n        }\r\n        \r\n        canvas.addEventListener(\"mousedown\", (e) => putCord(windowToCanvas(e.target, e.clientX, e.clientY)));\r\n\r\n        const canvasCoordinates = document.querySelector(\".canvas_coordinates\");\r\n        canvas.addEventListener(\"mousemove\", (e) => {\r\n            let { x, y } = windowToCanvas(e.target, e.clientX, e.clientY);\r\n            canvasCoordinates.innerHTML = `X: ${x / cellSize}; Y: ${y / cellSize}`;\r\n        });\r\n    }\r\n\r\n    randomGeneration();\r\n    customGeneration();\r\n    putPointsEvents();\r\n}\r\nexport default pointsGeneration;\r\n","// создать полотно, сетку и добавить события для чекбоксов\r\n\r\nclass SrartPanel {\r\n    constructor(colors, settings) {\r\n        this.canvas = createCanvas(),\r\n        this.grid = createGrid(),\r\n        this.panel = defaultMatrix(settings);\r\n    }\r\n}\r\n\r\nfunction createStartPanel(colors, settings) {\r\n    const { width, height, cellSize } = settings;\r\n    // сетка canvas\r\n    function createGrid() {\r\n        const cnv = document.createElement(\"canvas\");\r\n        cnv.id = \"grid_canvas\";\r\n        cnv.width = width;\r\n        cnv.height = height;\r\n        let ctx = cnv.getContext(\"2d\");\r\n        ctx.strokeStyle = colors.grid;\r\n        let w = cnv.width - 1;\r\n        let h = cnv.height - 1;\r\n        for (let x = 0; x < w; x += cellSize) ctx.strokeRect(x, 0, 0.1, h);\r\n        for (let y = 0; y < h; y += cellSize) ctx.strokeRect(0, y, w, 0.1);\r\n        return cnv;\r\n    }\r\n\r\n    // основное полотно\r\n    function createCanvas() {\r\n        const cnv = document.createElement(\"canvas\");\r\n        cnv.classList.add(\"background\");\r\n        cnv.classList.add(\"transparency\");\r\n        cnv.id = \"canvas\";\r\n        cnv.width = width;\r\n        cnv.height = height;\r\n        cnv.style.backgroundColor = colors.empty;\r\n        return cnv;\r\n    }\r\n\r\n    function canvasCheckboxEvents(canvas, grid) {\r\n        // Показать/убрать сетку\r\n        document.querySelector(\"#grid_checkbox\").addEventListener(\"input\", () => {\r\n            grid.classList.toggle(\"hidden\");\r\n        });\r\n\r\n        // Показать/убрать полото\r\n        document.querySelector(\"#canvas_checkbox\").addEventListener(\"input\", () => {\r\n            canvas.classList.toggle(\"hidden\");\r\n        });\r\n    }\r\n\r\n    const canvas = createCanvas(),\r\n        grid = createGrid(),\r\n        panel = defaultMatrix(settings);\r\n\r\n    // отчистить полотно\r\n    document.querySelector(\"#clear_button\").addEventListener(\"click\", () => clearCanvas(canvas, panel, settings));\r\n\r\n    canvasCheckboxEvents(canvas, grid);\r\n\r\n    return {\r\n        canvas,\r\n        grid,\r\n        panel,\r\n    };\r\n}\r\n\r\nfunction clearCanvas(canvas, panel, settings) {\r\n    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\r\n    panel = defaultMatrix(settings);\r\n}\r\n\r\n// пустая матрица (чистое поле)\r\nfunction defaultMatrix(settings) {\r\n    const { width, height, cellSize } = settings,\r\n        iMax = Math.floor(width / cellSize),\r\n        jMax = Math.floor(height / cellSize),\r\n        panel = [];\r\n\r\n    for (let i = 0; i < iMax; i++) panel[i] = new Array(jMax);\r\n\r\n    return panel;\r\n}\r\n\r\nexport default createStartPanel;\r\nexport { clearCanvas };\r\n","// import \"materialize-css\";\r\nimport pointsGeneration from \"./components/points-generation\";\r\nimport createStartPanel from \"./components/canvas\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    const container = document.querySelector(\"#container\");\r\n    const settings = { width: 750, height: 750, cellSize: 7, cellType: \"empty\" };\r\n    const colors = { empty: \"#D3D3D3\", yng: \"#008000\", yang: \"#FF0000\", grid: \"black\" };\r\n    const { canvas, grid, panel } = createStartPanel(colors, settings);\r\n\r\n    pointsGeneration(panel, canvas, settings, colors);\r\n\r\n    // document.querySelector(\"#generate_button\").addEventListener(\"click\", () => console.log(panel));\r\n\r\n    container.appendChild(canvas);\r\n    container.appendChild(grid);\r\n\r\n    function start(params) {}\r\n});\r\n"],"sourceRoot":""}